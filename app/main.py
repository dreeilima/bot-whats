"""
    Esse c√≥digo √© o m√≥dulo principal do projeto, respons√°vel por iniciar
todas funcionalidades do sistema.

"""
from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import RedirectResponse
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates
import logging
import os
from app.database import init_db

# Configura logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Configura diret√≥rios
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
TEMPLATES_DIR = os.path.join(BASE_DIR, "templates")

# Cria diret√≥rio de templates se n√£o existir
os.makedirs(TEMPLATES_DIR, exist_ok=True)

# Cria aplica√ß√£o FastAPI
app = FastAPI(
    title="Bot WhatsApp",
    description="API para bot de WhatsApp com gest√£o financeira",
    version="1.0.0"
)

# Configura√ß√£o CORS mais permissiva
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"]
)

# Configura templates
templates = Jinja2Templates(directory=TEMPLATES_DIR)
app.mount("/static", StaticFiles(directory=os.path.join(BASE_DIR, "static")), name="static")

# Rota raiz redirecionando para docs
@app.get("/")
async def root():
    logger.info("üëã Acesso √† rota raiz")
    return RedirectResponse(url="/docs")

# Rota de status
@app.get("/status")
async def status():
    return {
        "status": "online",
        "version": "1.0.0"
    }

# Importa e registra as rotas
from app.routes.whatsapp import router as whatsapp_router
logger.info("üîÑ Registrando rotas WhatsApp")
app.include_router(whatsapp_router, prefix="/whatsapp", tags=["whatsapp"])

@app.get("/health")
async def health():
    logger.info("üíì Verifica√ß√£o de sa√∫de")
    return {"status": "healthy"}

# Eventos
@app.on_event("startup")
async def startup():
    try:
        logger.info("üöÄ Iniciando aplica√ß√£o...")
        logger.info(f"üìÅ Templates dir: {TEMPLATES_DIR}")
        await init_db()
        logger.info("‚úÖ Banco de dados inicializado")
    except Exception as e:
        logger.error(f"‚ùå Erro na inicializa√ß√£o: {e}")
        logger.exception(e)
        raise

# Log de inicializa√ß√£o
logger.info("üöÄ Aplica√ß√£o iniciada")
logger.info(f"üìÅ Diret√≥rio de templates: {TEMPLATES_DIR}")

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)
